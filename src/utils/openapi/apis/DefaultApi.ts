/* tslint:disable */
/* eslint-disable */
/**
 * HFHS Regi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddHistoryQuery,
  AuthStatus,
  HTTPValidationError,
  History,
  Setting,
  Status,
  User,
} from '../models/index';
import {
    AddHistoryQueryFromJSON,
    AddHistoryQueryToJSON,
    AuthStatusFromJSON,
    AuthStatusToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HistoryFromJSON,
    HistoryToJSON,
    SettingFromJSON,
    SettingToJSON,
    StatusFromJSON,
    StatusToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AddHistoryRequest {
    className: string;
    total: number;
    change: number;
    product: string;
}

export interface GetHistoryRequest {
    className: string;
}

export interface GetSettingRequest {
    className: string;
}

export interface SetSettingRequest {
    className: string;
    goal: number;
    reserve: number;
    additionalreserve: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add History
     */
    async addHistoryRaw(requestParameters: AddHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddHistoryQuery>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling addHistory().'
            );
        }

        if (requestParameters['total'] == null) {
            throw new runtime.RequiredError(
                'total',
                'Required parameter "total" was null or undefined when calling addHistory().'
            );
        }

        if (requestParameters['change'] == null) {
            throw new runtime.RequiredError(
                'change',
                'Required parameter "change" was null or undefined when calling addHistory().'
            );
        }

        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling addHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['total'] != null) {
            queryParameters['total'] = requestParameters['total'];
        }

        if (requestParameters['change'] != null) {
            queryParameters['change'] = requestParameters['change'];
        }

        if (requestParameters['product'] != null) {
            queryParameters['product'] = requestParameters['product'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/history/add/{class_name}`.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddHistoryQueryFromJSON(jsonValue));
    }

    /**
     * Add History
     */
    async addHistory(requestParameters: AddHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddHistoryQuery> {
        const response = await this.addHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get History
     */
    async getHistoryRaw(requestParameters: GetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<History>>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling getHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/history/{class_name}`.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryFromJSON));
    }

    /**
     * Get History
     */
    async getHistory(requestParameters: GetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<History>> {
        const response = await this.getHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Islogin
     */
    async getIsLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthStatusFromJSON(jsonValue));
    }

    /**
     * Get Islogin
     */
    async getIsLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthStatus> {
        const response = await this.getIsLoginRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Setting
     */
    async getSettingRaw(requestParameters: GetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling getSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/setting/{class_name}`.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue));
    }

    /**
     * Get Setting
     */
    async getSetting(requestParameters: GetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Setting> {
        const response = await this.getSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Index
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Userinfo
     */
    async getUserinfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get Userinfo
     */
    async getUserinfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserinfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Setting
     */
    async setSettingRaw(requestParameters: SetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling setSetting().'
            );
        }

        if (requestParameters['goal'] == null) {
            throw new runtime.RequiredError(
                'goal',
                'Required parameter "goal" was null or undefined when calling setSetting().'
            );
        }

        if (requestParameters['reserve'] == null) {
            throw new runtime.RequiredError(
                'reserve',
                'Required parameter "reserve" was null or undefined when calling setSetting().'
            );
        }

        if (requestParameters['additionalreserve'] == null) {
            throw new runtime.RequiredError(
                'additionalreserve',
                'Required parameter "additionalreserve" was null or undefined when calling setSetting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['goal'] != null) {
            queryParameters['goal'] = requestParameters['goal'];
        }

        if (requestParameters['reserve'] != null) {
            queryParameters['reserve'] = requestParameters['reserve'];
        }

        if (requestParameters['additionalreserve'] != null) {
            queryParameters['additionalreserve'] = requestParameters['additionalreserve'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/setting/set/{class_name}`.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue));
    }

    /**
     * Set Setting
     */
    async setSetting(requestParameters: SetSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Setting> {
        const response = await this.setSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
